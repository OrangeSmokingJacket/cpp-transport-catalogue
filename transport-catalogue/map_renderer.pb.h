// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_renderer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_5frenderer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_5frenderer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5frenderer_2eproto;
namespace rend {
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Color_RGB;
class Color_RGBDefaultTypeInternal;
extern Color_RGBDefaultTypeInternal _Color_RGB_default_instance_;
class Color_RGBA;
class Color_RGBADefaultTypeInternal;
extern Color_RGBADefaultTypeInternal _Color_RGBA_default_instance_;
class Color_String;
class Color_StringDefaultTypeInternal;
extern Color_StringDefaultTypeInternal _Color_String_default_instance_;
class MapRenderer;
class MapRendererDefaultTypeInternal;
extern MapRendererDefaultTypeInternal _MapRenderer_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
}  // namespace rend
PROTOBUF_NAMESPACE_OPEN
template<> ::rend::Color* Arena::CreateMaybeMessage<::rend::Color>(Arena*);
template<> ::rend::Color_RGB* Arena::CreateMaybeMessage<::rend::Color_RGB>(Arena*);
template<> ::rend::Color_RGBA* Arena::CreateMaybeMessage<::rend::Color_RGBA>(Arena*);
template<> ::rend::Color_String* Arena::CreateMaybeMessage<::rend::Color_String>(Arena*);
template<> ::rend::MapRenderer* Arena::CreateMaybeMessage<::rend::MapRenderer>(Arena*);
template<> ::rend::Point* Arena::CreateMaybeMessage<::rend::Point>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rend {

// ===================================================================

class Color_String PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rend.Color_String) */ {
 public:
  inline Color_String() : Color_String(nullptr) {}
  virtual ~Color_String();

  Color_String(const Color_String& from);
  Color_String(Color_String&& from) noexcept
    : Color_String() {
    *this = ::std::move(from);
  }

  inline Color_String& operator=(const Color_String& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color_String& operator=(Color_String&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color_String& default_instance();

  static inline const Color_String* internal_default_instance() {
    return reinterpret_cast<const Color_String*>(
               &_Color_String_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Color_String& a, Color_String& b) {
    a.Swap(&b);
  }
  inline void Swap(Color_String* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color_String* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color_String* New() const final {
    return CreateMaybeMessage<Color_String>(nullptr);
  }

  Color_String* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color_String>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color_String& from);
  void MergeFrom(const Color_String& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color_String* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rend.Color_String";
  }
  protected:
  explicit Color_String(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5frenderer_2eproto);
    return ::descriptor_table_map_5frenderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
  };
  // bytes color = 1;
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const void* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // @@protoc_insertion_point(class_scope:rend.Color_String)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class Color_RGB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rend.Color_RGB) */ {
 public:
  inline Color_RGB() : Color_RGB(nullptr) {}
  virtual ~Color_RGB();

  Color_RGB(const Color_RGB& from);
  Color_RGB(Color_RGB&& from) noexcept
    : Color_RGB() {
    *this = ::std::move(from);
  }

  inline Color_RGB& operator=(const Color_RGB& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color_RGB& operator=(Color_RGB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color_RGB& default_instance();

  static inline const Color_RGB* internal_default_instance() {
    return reinterpret_cast<const Color_RGB*>(
               &_Color_RGB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Color_RGB& a, Color_RGB& b) {
    a.Swap(&b);
  }
  inline void Swap(Color_RGB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color_RGB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color_RGB* New() const final {
    return CreateMaybeMessage<Color_RGB>(nullptr);
  }

  Color_RGB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color_RGB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color_RGB& from);
  void MergeFrom(const Color_RGB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color_RGB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rend.Color_RGB";
  }
  protected:
  explicit Color_RGB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5frenderer_2eproto);
    return ::descriptor_table_map_5frenderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // uint32 r = 1;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::uint32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 g = 2;
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::uint32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 b = 3;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rend.Color_RGB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 r_;
  ::PROTOBUF_NAMESPACE_ID::uint32 g_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class Color_RGBA PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rend.Color_RGBA) */ {
 public:
  inline Color_RGBA() : Color_RGBA(nullptr) {}
  virtual ~Color_RGBA();

  Color_RGBA(const Color_RGBA& from);
  Color_RGBA(Color_RGBA&& from) noexcept
    : Color_RGBA() {
    *this = ::std::move(from);
  }

  inline Color_RGBA& operator=(const Color_RGBA& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color_RGBA& operator=(Color_RGBA&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color_RGBA& default_instance();

  static inline const Color_RGBA* internal_default_instance() {
    return reinterpret_cast<const Color_RGBA*>(
               &_Color_RGBA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Color_RGBA& a, Color_RGBA& b) {
    a.Swap(&b);
  }
  inline void Swap(Color_RGBA* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color_RGBA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color_RGBA* New() const final {
    return CreateMaybeMessage<Color_RGBA>(nullptr);
  }

  Color_RGBA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color_RGBA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color_RGBA& from);
  void MergeFrom(const Color_RGBA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color_RGBA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rend.Color_RGBA";
  }
  protected:
  explicit Color_RGBA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5frenderer_2eproto);
    return ::descriptor_table_map_5frenderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kOpacityFieldNumber = 4,
    kBFieldNumber = 3,
  };
  // uint32 r = 1;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::uint32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 g = 2;
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::uint32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double opacity = 4;
  void clear_opacity();
  double opacity() const;
  void set_opacity(double value);
  private:
  double _internal_opacity() const;
  void _internal_set_opacity(double value);
  public:

  // uint32 b = 3;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rend.Color_RGBA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 r_;
  ::PROTOBUF_NAMESPACE_ID::uint32 g_;
  double opacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class Color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rend.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  virtual ~Color();

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance();

  enum ColorCase {
    kColorString = 1,
    kColorRgb = 2,
    kColorRgba = 3,
    COLOR_NOT_SET = 0,
  };

  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rend.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5frenderer_2eproto);
    return ::descriptor_table_map_5frenderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorStringFieldNumber = 1,
    kColorRgbFieldNumber = 2,
    kColorRgbaFieldNumber = 3,
  };
  // .rend.Color_String color_string = 1;
  bool has_color_string() const;
  private:
  bool _internal_has_color_string() const;
  public:
  void clear_color_string();
  const ::rend::Color_String& color_string() const;
  ::rend::Color_String* release_color_string();
  ::rend::Color_String* mutable_color_string();
  void set_allocated_color_string(::rend::Color_String* color_string);
  private:
  const ::rend::Color_String& _internal_color_string() const;
  ::rend::Color_String* _internal_mutable_color_string();
  public:
  void unsafe_arena_set_allocated_color_string(
      ::rend::Color_String* color_string);
  ::rend::Color_String* unsafe_arena_release_color_string();

  // .rend.Color_RGB color_rgb = 2;
  bool has_color_rgb() const;
  private:
  bool _internal_has_color_rgb() const;
  public:
  void clear_color_rgb();
  const ::rend::Color_RGB& color_rgb() const;
  ::rend::Color_RGB* release_color_rgb();
  ::rend::Color_RGB* mutable_color_rgb();
  void set_allocated_color_rgb(::rend::Color_RGB* color_rgb);
  private:
  const ::rend::Color_RGB& _internal_color_rgb() const;
  ::rend::Color_RGB* _internal_mutable_color_rgb();
  public:
  void unsafe_arena_set_allocated_color_rgb(
      ::rend::Color_RGB* color_rgb);
  ::rend::Color_RGB* unsafe_arena_release_color_rgb();

  // .rend.Color_RGBA color_rgba = 3;
  bool has_color_rgba() const;
  private:
  bool _internal_has_color_rgba() const;
  public:
  void clear_color_rgba();
  const ::rend::Color_RGBA& color_rgba() const;
  ::rend::Color_RGBA* release_color_rgba();
  ::rend::Color_RGBA* mutable_color_rgba();
  void set_allocated_color_rgba(::rend::Color_RGBA* color_rgba);
  private:
  const ::rend::Color_RGBA& _internal_color_rgba() const;
  ::rend::Color_RGBA* _internal_mutable_color_rgba();
  public:
  void unsafe_arena_set_allocated_color_rgba(
      ::rend::Color_RGBA* color_rgba);
  ::rend::Color_RGBA* unsafe_arena_release_color_rgba();

  void clear_color();
  ColorCase color_case() const;
  // @@protoc_insertion_point(class_scope:rend.Color)
 private:
  class _Internal;
  void set_has_color_string();
  void set_has_color_rgb();
  void set_has_color_rgba();

  inline bool has_color() const;
  inline void clear_has_color();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ColorUnion {
    ColorUnion() {}
    ::rend::Color_String* color_string_;
    ::rend::Color_RGB* color_rgb_;
    ::rend::Color_RGBA* color_rgba_;
  } color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rend.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rend.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5frenderer_2eproto);
    return ::descriptor_table_map_5frenderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:rend.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class MapRenderer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rend.MapRenderer) */ {
 public:
  inline MapRenderer() : MapRenderer(nullptr) {}
  virtual ~MapRenderer();

  MapRenderer(const MapRenderer& from);
  MapRenderer(MapRenderer&& from) noexcept
    : MapRenderer() {
    *this = ::std::move(from);
  }

  inline MapRenderer& operator=(const MapRenderer& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapRenderer& operator=(MapRenderer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapRenderer& default_instance();

  static inline const MapRenderer* internal_default_instance() {
    return reinterpret_cast<const MapRenderer*>(
               &_MapRenderer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MapRenderer& a, MapRenderer& b) {
    a.Swap(&b);
  }
  inline void Swap(MapRenderer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapRenderer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapRenderer* New() const final {
    return CreateMaybeMessage<MapRenderer>(nullptr);
  }

  MapRenderer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapRenderer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapRenderer& from);
  void MergeFrom(const MapRenderer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapRenderer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rend.MapRenderer";
  }
  protected:
  explicit MapRenderer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5frenderer_2eproto);
    return ::descriptor_table_map_5frenderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPalleteFieldNumber = 1,
    kStopLabelOffsetFieldNumber = 8,
    kBusLabelOffsetFieldNumber = 10,
    kUnderlayerColorFieldNumber = 11,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kPaddingFieldNumber = 4,
    kLineWidthFieldNumber = 5,
    kStopRadiusFieldNumber = 6,
    kStopLabelFontSizeFieldNumber = 7,
    kBusLabelFontSizeFieldNumber = 9,
    kUnderlayerWidthFieldNumber = 12,
  };
  // repeated .rend.Color pallete = 1;
  int pallete_size() const;
  private:
  int _internal_pallete_size() const;
  public:
  void clear_pallete();
  ::rend::Color* mutable_pallete(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rend::Color >*
      mutable_pallete();
  private:
  const ::rend::Color& _internal_pallete(int index) const;
  ::rend::Color* _internal_add_pallete();
  public:
  const ::rend::Color& pallete(int index) const;
  ::rend::Color* add_pallete();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rend::Color >&
      pallete() const;

  // .rend.Point stop_label_offset = 8;
  bool has_stop_label_offset() const;
  private:
  bool _internal_has_stop_label_offset() const;
  public:
  void clear_stop_label_offset();
  const ::rend::Point& stop_label_offset() const;
  ::rend::Point* release_stop_label_offset();
  ::rend::Point* mutable_stop_label_offset();
  void set_allocated_stop_label_offset(::rend::Point* stop_label_offset);
  private:
  const ::rend::Point& _internal_stop_label_offset() const;
  ::rend::Point* _internal_mutable_stop_label_offset();
  public:
  void unsafe_arena_set_allocated_stop_label_offset(
      ::rend::Point* stop_label_offset);
  ::rend::Point* unsafe_arena_release_stop_label_offset();

  // .rend.Point bus_label_offset = 10;
  bool has_bus_label_offset() const;
  private:
  bool _internal_has_bus_label_offset() const;
  public:
  void clear_bus_label_offset();
  const ::rend::Point& bus_label_offset() const;
  ::rend::Point* release_bus_label_offset();
  ::rend::Point* mutable_bus_label_offset();
  void set_allocated_bus_label_offset(::rend::Point* bus_label_offset);
  private:
  const ::rend::Point& _internal_bus_label_offset() const;
  ::rend::Point* _internal_mutable_bus_label_offset();
  public:
  void unsafe_arena_set_allocated_bus_label_offset(
      ::rend::Point* bus_label_offset);
  ::rend::Point* unsafe_arena_release_bus_label_offset();

  // .rend.Color underlayer_color = 11;
  bool has_underlayer_color() const;
  private:
  bool _internal_has_underlayer_color() const;
  public:
  void clear_underlayer_color();
  const ::rend::Color& underlayer_color() const;
  ::rend::Color* release_underlayer_color();
  ::rend::Color* mutable_underlayer_color();
  void set_allocated_underlayer_color(::rend::Color* underlayer_color);
  private:
  const ::rend::Color& _internal_underlayer_color() const;
  ::rend::Color* _internal_mutable_underlayer_color();
  public:
  void unsafe_arena_set_allocated_underlayer_color(
      ::rend::Color* underlayer_color);
  ::rend::Color* unsafe_arena_release_underlayer_color();

  // double width = 2;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 3;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double padding = 4;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double line_width = 5;
  void clear_line_width();
  double line_width() const;
  void set_line_width(double value);
  private:
  double _internal_line_width() const;
  void _internal_set_line_width(double value);
  public:

  // double stop_radius = 6;
  void clear_stop_radius();
  double stop_radius() const;
  void set_stop_radius(double value);
  private:
  double _internal_stop_radius() const;
  void _internal_set_stop_radius(double value);
  public:

  // int32 stop_label_font_size = 7;
  void clear_stop_label_font_size();
  ::PROTOBUF_NAMESPACE_ID::int32 stop_label_font_size() const;
  void set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stop_label_font_size() const;
  void _internal_set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bus_label_font_size = 9;
  void clear_bus_label_font_size();
  ::PROTOBUF_NAMESPACE_ID::int32 bus_label_font_size() const;
  void set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bus_label_font_size() const;
  void _internal_set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double underlayer_width = 12;
  void clear_underlayer_width();
  double underlayer_width() const;
  void set_underlayer_width(double value);
  private:
  double _internal_underlayer_width() const;
  void _internal_set_underlayer_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:rend.MapRenderer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rend::Color > pallete_;
  ::rend::Point* stop_label_offset_;
  ::rend::Point* bus_label_offset_;
  ::rend::Color* underlayer_color_;
  double width_;
  double height_;
  double padding_;
  double line_width_;
  double stop_radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 stop_label_font_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 bus_label_font_size_;
  double underlayer_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Color_String

// bytes color = 1;
inline void Color_String::clear_color() {
  color_.ClearToEmpty();
}
inline const std::string& Color_String::color() const {
  // @@protoc_insertion_point(field_get:rend.Color_String.color)
  return _internal_color();
}
inline void Color_String::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:rend.Color_String.color)
}
inline std::string* Color_String::mutable_color() {
  // @@protoc_insertion_point(field_mutable:rend.Color_String.color)
  return _internal_mutable_color();
}
inline const std::string& Color_String::_internal_color() const {
  return color_.Get();
}
inline void Color_String::_internal_set_color(const std::string& value) {
  
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Color_String::set_color(std::string&& value) {
  
  color_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rend.Color_String.color)
}
inline void Color_String::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rend.Color_String.color)
}
inline void Color_String::set_color(const void* value,
    size_t size) {
  
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rend.Color_String.color)
}
inline std::string* Color_String::_internal_mutable_color() {
  
  return color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Color_String::release_color() {
  // @@protoc_insertion_point(field_release:rend.Color_String.color)
  return color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Color_String::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rend.Color_String.color)
}

// -------------------------------------------------------------------

// Color_RGB

// uint32 r = 1;
inline void Color_RGB::clear_r() {
  r_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color_RGB::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color_RGB::r() const {
  // @@protoc_insertion_point(field_get:rend.Color_RGB.r)
  return _internal_r();
}
inline void Color_RGB::_internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  r_ = value;
}
inline void Color_RGB::set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:rend.Color_RGB.r)
}

// uint32 g = 2;
inline void Color_RGB::clear_g() {
  g_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color_RGB::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color_RGB::g() const {
  // @@protoc_insertion_point(field_get:rend.Color_RGB.g)
  return _internal_g();
}
inline void Color_RGB::_internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  g_ = value;
}
inline void Color_RGB::set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:rend.Color_RGB.g)
}

// uint32 b = 3;
inline void Color_RGB::clear_b() {
  b_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color_RGB::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color_RGB::b() const {
  // @@protoc_insertion_point(field_get:rend.Color_RGB.b)
  return _internal_b();
}
inline void Color_RGB::_internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  b_ = value;
}
inline void Color_RGB::set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:rend.Color_RGB.b)
}

// -------------------------------------------------------------------

// Color_RGBA

// uint32 r = 1;
inline void Color_RGBA::clear_r() {
  r_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color_RGBA::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color_RGBA::r() const {
  // @@protoc_insertion_point(field_get:rend.Color_RGBA.r)
  return _internal_r();
}
inline void Color_RGBA::_internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  r_ = value;
}
inline void Color_RGBA::set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:rend.Color_RGBA.r)
}

// uint32 g = 2;
inline void Color_RGBA::clear_g() {
  g_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color_RGBA::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color_RGBA::g() const {
  // @@protoc_insertion_point(field_get:rend.Color_RGBA.g)
  return _internal_g();
}
inline void Color_RGBA::_internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  g_ = value;
}
inline void Color_RGBA::set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:rend.Color_RGBA.g)
}

// uint32 b = 3;
inline void Color_RGBA::clear_b() {
  b_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color_RGBA::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color_RGBA::b() const {
  // @@protoc_insertion_point(field_get:rend.Color_RGBA.b)
  return _internal_b();
}
inline void Color_RGBA::_internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  b_ = value;
}
inline void Color_RGBA::set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:rend.Color_RGBA.b)
}

// double opacity = 4;
inline void Color_RGBA::clear_opacity() {
  opacity_ = 0;
}
inline double Color_RGBA::_internal_opacity() const {
  return opacity_;
}
inline double Color_RGBA::opacity() const {
  // @@protoc_insertion_point(field_get:rend.Color_RGBA.opacity)
  return _internal_opacity();
}
inline void Color_RGBA::_internal_set_opacity(double value) {
  
  opacity_ = value;
}
inline void Color_RGBA::set_opacity(double value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:rend.Color_RGBA.opacity)
}

// -------------------------------------------------------------------

// Color

// .rend.Color_String color_string = 1;
inline bool Color::_internal_has_color_string() const {
  return color_case() == kColorString;
}
inline bool Color::has_color_string() const {
  return _internal_has_color_string();
}
inline void Color::set_has_color_string() {
  _oneof_case_[0] = kColorString;
}
inline void Color::clear_color_string() {
  if (_internal_has_color_string()) {
    if (GetArena() == nullptr) {
      delete color_.color_string_;
    }
    clear_has_color();
  }
}
inline ::rend::Color_String* Color::release_color_string() {
  // @@protoc_insertion_point(field_release:rend.Color.color_string)
  if (_internal_has_color_string()) {
    clear_has_color();
      ::rend::Color_String* temp = color_.color_string_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    color_.color_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rend::Color_String& Color::_internal_color_string() const {
  return _internal_has_color_string()
      ? *color_.color_string_
      : reinterpret_cast< ::rend::Color_String&>(::rend::_Color_String_default_instance_);
}
inline const ::rend::Color_String& Color::color_string() const {
  // @@protoc_insertion_point(field_get:rend.Color.color_string)
  return _internal_color_string();
}
inline ::rend::Color_String* Color::unsafe_arena_release_color_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rend.Color.color_string)
  if (_internal_has_color_string()) {
    clear_has_color();
    ::rend::Color_String* temp = color_.color_string_;
    color_.color_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Color::unsafe_arena_set_allocated_color_string(::rend::Color_String* color_string) {
  clear_color();
  if (color_string) {
    set_has_color_string();
    color_.color_string_ = color_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rend.Color.color_string)
}
inline ::rend::Color_String* Color::_internal_mutable_color_string() {
  if (!_internal_has_color_string()) {
    clear_color();
    set_has_color_string();
    color_.color_string_ = CreateMaybeMessage< ::rend::Color_String >(GetArena());
  }
  return color_.color_string_;
}
inline ::rend::Color_String* Color::mutable_color_string() {
  // @@protoc_insertion_point(field_mutable:rend.Color.color_string)
  return _internal_mutable_color_string();
}

// .rend.Color_RGB color_rgb = 2;
inline bool Color::_internal_has_color_rgb() const {
  return color_case() == kColorRgb;
}
inline bool Color::has_color_rgb() const {
  return _internal_has_color_rgb();
}
inline void Color::set_has_color_rgb() {
  _oneof_case_[0] = kColorRgb;
}
inline void Color::clear_color_rgb() {
  if (_internal_has_color_rgb()) {
    if (GetArena() == nullptr) {
      delete color_.color_rgb_;
    }
    clear_has_color();
  }
}
inline ::rend::Color_RGB* Color::release_color_rgb() {
  // @@protoc_insertion_point(field_release:rend.Color.color_rgb)
  if (_internal_has_color_rgb()) {
    clear_has_color();
      ::rend::Color_RGB* temp = color_.color_rgb_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    color_.color_rgb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rend::Color_RGB& Color::_internal_color_rgb() const {
  return _internal_has_color_rgb()
      ? *color_.color_rgb_
      : reinterpret_cast< ::rend::Color_RGB&>(::rend::_Color_RGB_default_instance_);
}
inline const ::rend::Color_RGB& Color::color_rgb() const {
  // @@protoc_insertion_point(field_get:rend.Color.color_rgb)
  return _internal_color_rgb();
}
inline ::rend::Color_RGB* Color::unsafe_arena_release_color_rgb() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rend.Color.color_rgb)
  if (_internal_has_color_rgb()) {
    clear_has_color();
    ::rend::Color_RGB* temp = color_.color_rgb_;
    color_.color_rgb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Color::unsafe_arena_set_allocated_color_rgb(::rend::Color_RGB* color_rgb) {
  clear_color();
  if (color_rgb) {
    set_has_color_rgb();
    color_.color_rgb_ = color_rgb;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rend.Color.color_rgb)
}
inline ::rend::Color_RGB* Color::_internal_mutable_color_rgb() {
  if (!_internal_has_color_rgb()) {
    clear_color();
    set_has_color_rgb();
    color_.color_rgb_ = CreateMaybeMessage< ::rend::Color_RGB >(GetArena());
  }
  return color_.color_rgb_;
}
inline ::rend::Color_RGB* Color::mutable_color_rgb() {
  // @@protoc_insertion_point(field_mutable:rend.Color.color_rgb)
  return _internal_mutable_color_rgb();
}

// .rend.Color_RGBA color_rgba = 3;
inline bool Color::_internal_has_color_rgba() const {
  return color_case() == kColorRgba;
}
inline bool Color::has_color_rgba() const {
  return _internal_has_color_rgba();
}
inline void Color::set_has_color_rgba() {
  _oneof_case_[0] = kColorRgba;
}
inline void Color::clear_color_rgba() {
  if (_internal_has_color_rgba()) {
    if (GetArena() == nullptr) {
      delete color_.color_rgba_;
    }
    clear_has_color();
  }
}
inline ::rend::Color_RGBA* Color::release_color_rgba() {
  // @@protoc_insertion_point(field_release:rend.Color.color_rgba)
  if (_internal_has_color_rgba()) {
    clear_has_color();
      ::rend::Color_RGBA* temp = color_.color_rgba_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    color_.color_rgba_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rend::Color_RGBA& Color::_internal_color_rgba() const {
  return _internal_has_color_rgba()
      ? *color_.color_rgba_
      : reinterpret_cast< ::rend::Color_RGBA&>(::rend::_Color_RGBA_default_instance_);
}
inline const ::rend::Color_RGBA& Color::color_rgba() const {
  // @@protoc_insertion_point(field_get:rend.Color.color_rgba)
  return _internal_color_rgba();
}
inline ::rend::Color_RGBA* Color::unsafe_arena_release_color_rgba() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rend.Color.color_rgba)
  if (_internal_has_color_rgba()) {
    clear_has_color();
    ::rend::Color_RGBA* temp = color_.color_rgba_;
    color_.color_rgba_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Color::unsafe_arena_set_allocated_color_rgba(::rend::Color_RGBA* color_rgba) {
  clear_color();
  if (color_rgba) {
    set_has_color_rgba();
    color_.color_rgba_ = color_rgba;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rend.Color.color_rgba)
}
inline ::rend::Color_RGBA* Color::_internal_mutable_color_rgba() {
  if (!_internal_has_color_rgba()) {
    clear_color();
    set_has_color_rgba();
    color_.color_rgba_ = CreateMaybeMessage< ::rend::Color_RGBA >(GetArena());
  }
  return color_.color_rgba_;
}
inline ::rend::Color_RGBA* Color::mutable_color_rgba() {
  // @@protoc_insertion_point(field_mutable:rend.Color.color_rgba)
  return _internal_mutable_color_rgba();
}

inline bool Color::has_color() const {
  return color_case() != COLOR_NOT_SET;
}
inline void Color::clear_has_color() {
  _oneof_case_[0] = COLOR_NOT_SET;
}
inline Color::ColorCase Color::color_case() const {
  return Color::ColorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:rend.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:rend.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:rend.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:rend.Point.y)
}

// -------------------------------------------------------------------

// MapRenderer

// repeated .rend.Color pallete = 1;
inline int MapRenderer::_internal_pallete_size() const {
  return pallete_.size();
}
inline int MapRenderer::pallete_size() const {
  return _internal_pallete_size();
}
inline void MapRenderer::clear_pallete() {
  pallete_.Clear();
}
inline ::rend::Color* MapRenderer::mutable_pallete(int index) {
  // @@protoc_insertion_point(field_mutable:rend.MapRenderer.pallete)
  return pallete_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rend::Color >*
MapRenderer::mutable_pallete() {
  // @@protoc_insertion_point(field_mutable_list:rend.MapRenderer.pallete)
  return &pallete_;
}
inline const ::rend::Color& MapRenderer::_internal_pallete(int index) const {
  return pallete_.Get(index);
}
inline const ::rend::Color& MapRenderer::pallete(int index) const {
  // @@protoc_insertion_point(field_get:rend.MapRenderer.pallete)
  return _internal_pallete(index);
}
inline ::rend::Color* MapRenderer::_internal_add_pallete() {
  return pallete_.Add();
}
inline ::rend::Color* MapRenderer::add_pallete() {
  // @@protoc_insertion_point(field_add:rend.MapRenderer.pallete)
  return _internal_add_pallete();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rend::Color >&
MapRenderer::pallete() const {
  // @@protoc_insertion_point(field_list:rend.MapRenderer.pallete)
  return pallete_;
}

// double width = 2;
inline void MapRenderer::clear_width() {
  width_ = 0;
}
inline double MapRenderer::_internal_width() const {
  return width_;
}
inline double MapRenderer::width() const {
  // @@protoc_insertion_point(field_get:rend.MapRenderer.width)
  return _internal_width();
}
inline void MapRenderer::_internal_set_width(double value) {
  
  width_ = value;
}
inline void MapRenderer::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:rend.MapRenderer.width)
}

// double height = 3;
inline void MapRenderer::clear_height() {
  height_ = 0;
}
inline double MapRenderer::_internal_height() const {
  return height_;
}
inline double MapRenderer::height() const {
  // @@protoc_insertion_point(field_get:rend.MapRenderer.height)
  return _internal_height();
}
inline void MapRenderer::_internal_set_height(double value) {
  
  height_ = value;
}
inline void MapRenderer::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:rend.MapRenderer.height)
}

// double padding = 4;
inline void MapRenderer::clear_padding() {
  padding_ = 0;
}
inline double MapRenderer::_internal_padding() const {
  return padding_;
}
inline double MapRenderer::padding() const {
  // @@protoc_insertion_point(field_get:rend.MapRenderer.padding)
  return _internal_padding();
}
inline void MapRenderer::_internal_set_padding(double value) {
  
  padding_ = value;
}
inline void MapRenderer::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:rend.MapRenderer.padding)
}

// double line_width = 5;
inline void MapRenderer::clear_line_width() {
  line_width_ = 0;
}
inline double MapRenderer::_internal_line_width() const {
  return line_width_;
}
inline double MapRenderer::line_width() const {
  // @@protoc_insertion_point(field_get:rend.MapRenderer.line_width)
  return _internal_line_width();
}
inline void MapRenderer::_internal_set_line_width(double value) {
  
  line_width_ = value;
}
inline void MapRenderer::set_line_width(double value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:rend.MapRenderer.line_width)
}

// double stop_radius = 6;
inline void MapRenderer::clear_stop_radius() {
  stop_radius_ = 0;
}
inline double MapRenderer::_internal_stop_radius() const {
  return stop_radius_;
}
inline double MapRenderer::stop_radius() const {
  // @@protoc_insertion_point(field_get:rend.MapRenderer.stop_radius)
  return _internal_stop_radius();
}
inline void MapRenderer::_internal_set_stop_radius(double value) {
  
  stop_radius_ = value;
}
inline void MapRenderer::set_stop_radius(double value) {
  _internal_set_stop_radius(value);
  // @@protoc_insertion_point(field_set:rend.MapRenderer.stop_radius)
}

// int32 stop_label_font_size = 7;
inline void MapRenderer::clear_stop_label_font_size() {
  stop_label_font_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapRenderer::_internal_stop_label_font_size() const {
  return stop_label_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapRenderer::stop_label_font_size() const {
  // @@protoc_insertion_point(field_get:rend.MapRenderer.stop_label_font_size)
  return _internal_stop_label_font_size();
}
inline void MapRenderer::_internal_set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stop_label_font_size_ = value;
}
inline void MapRenderer::set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stop_label_font_size(value);
  // @@protoc_insertion_point(field_set:rend.MapRenderer.stop_label_font_size)
}

// .rend.Point stop_label_offset = 8;
inline bool MapRenderer::_internal_has_stop_label_offset() const {
  return this != internal_default_instance() && stop_label_offset_ != nullptr;
}
inline bool MapRenderer::has_stop_label_offset() const {
  return _internal_has_stop_label_offset();
}
inline void MapRenderer::clear_stop_label_offset() {
  if (GetArena() == nullptr && stop_label_offset_ != nullptr) {
    delete stop_label_offset_;
  }
  stop_label_offset_ = nullptr;
}
inline const ::rend::Point& MapRenderer::_internal_stop_label_offset() const {
  const ::rend::Point* p = stop_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::rend::Point&>(
      ::rend::_Point_default_instance_);
}
inline const ::rend::Point& MapRenderer::stop_label_offset() const {
  // @@protoc_insertion_point(field_get:rend.MapRenderer.stop_label_offset)
  return _internal_stop_label_offset();
}
inline void MapRenderer::unsafe_arena_set_allocated_stop_label_offset(
    ::rend::Point* stop_label_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_label_offset_);
  }
  stop_label_offset_ = stop_label_offset;
  if (stop_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rend.MapRenderer.stop_label_offset)
}
inline ::rend::Point* MapRenderer::release_stop_label_offset() {
  
  ::rend::Point* temp = stop_label_offset_;
  stop_label_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::rend::Point* MapRenderer::unsafe_arena_release_stop_label_offset() {
  // @@protoc_insertion_point(field_release:rend.MapRenderer.stop_label_offset)
  
  ::rend::Point* temp = stop_label_offset_;
  stop_label_offset_ = nullptr;
  return temp;
}
inline ::rend::Point* MapRenderer::_internal_mutable_stop_label_offset() {
  
  if (stop_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::rend::Point>(GetArena());
    stop_label_offset_ = p;
  }
  return stop_label_offset_;
}
inline ::rend::Point* MapRenderer::mutable_stop_label_offset() {
  // @@protoc_insertion_point(field_mutable:rend.MapRenderer.stop_label_offset)
  return _internal_mutable_stop_label_offset();
}
inline void MapRenderer::set_allocated_stop_label_offset(::rend::Point* stop_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stop_label_offset_;
  }
  if (stop_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop_label_offset);
    if (message_arena != submessage_arena) {
      stop_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  stop_label_offset_ = stop_label_offset;
  // @@protoc_insertion_point(field_set_allocated:rend.MapRenderer.stop_label_offset)
}

// int32 bus_label_font_size = 9;
inline void MapRenderer::clear_bus_label_font_size() {
  bus_label_font_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapRenderer::_internal_bus_label_font_size() const {
  return bus_label_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapRenderer::bus_label_font_size() const {
  // @@protoc_insertion_point(field_get:rend.MapRenderer.bus_label_font_size)
  return _internal_bus_label_font_size();
}
inline void MapRenderer::_internal_set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bus_label_font_size_ = value;
}
inline void MapRenderer::set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bus_label_font_size(value);
  // @@protoc_insertion_point(field_set:rend.MapRenderer.bus_label_font_size)
}

// .rend.Point bus_label_offset = 10;
inline bool MapRenderer::_internal_has_bus_label_offset() const {
  return this != internal_default_instance() && bus_label_offset_ != nullptr;
}
inline bool MapRenderer::has_bus_label_offset() const {
  return _internal_has_bus_label_offset();
}
inline void MapRenderer::clear_bus_label_offset() {
  if (GetArena() == nullptr && bus_label_offset_ != nullptr) {
    delete bus_label_offset_;
  }
  bus_label_offset_ = nullptr;
}
inline const ::rend::Point& MapRenderer::_internal_bus_label_offset() const {
  const ::rend::Point* p = bus_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::rend::Point&>(
      ::rend::_Point_default_instance_);
}
inline const ::rend::Point& MapRenderer::bus_label_offset() const {
  // @@protoc_insertion_point(field_get:rend.MapRenderer.bus_label_offset)
  return _internal_bus_label_offset();
}
inline void MapRenderer::unsafe_arena_set_allocated_bus_label_offset(
    ::rend::Point* bus_label_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_label_offset_);
  }
  bus_label_offset_ = bus_label_offset;
  if (bus_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rend.MapRenderer.bus_label_offset)
}
inline ::rend::Point* MapRenderer::release_bus_label_offset() {
  
  ::rend::Point* temp = bus_label_offset_;
  bus_label_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::rend::Point* MapRenderer::unsafe_arena_release_bus_label_offset() {
  // @@protoc_insertion_point(field_release:rend.MapRenderer.bus_label_offset)
  
  ::rend::Point* temp = bus_label_offset_;
  bus_label_offset_ = nullptr;
  return temp;
}
inline ::rend::Point* MapRenderer::_internal_mutable_bus_label_offset() {
  
  if (bus_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::rend::Point>(GetArena());
    bus_label_offset_ = p;
  }
  return bus_label_offset_;
}
inline ::rend::Point* MapRenderer::mutable_bus_label_offset() {
  // @@protoc_insertion_point(field_mutable:rend.MapRenderer.bus_label_offset)
  return _internal_mutable_bus_label_offset();
}
inline void MapRenderer::set_allocated_bus_label_offset(::rend::Point* bus_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bus_label_offset_;
  }
  if (bus_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bus_label_offset);
    if (message_arena != submessage_arena) {
      bus_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  bus_label_offset_ = bus_label_offset;
  // @@protoc_insertion_point(field_set_allocated:rend.MapRenderer.bus_label_offset)
}

// .rend.Color underlayer_color = 11;
inline bool MapRenderer::_internal_has_underlayer_color() const {
  return this != internal_default_instance() && underlayer_color_ != nullptr;
}
inline bool MapRenderer::has_underlayer_color() const {
  return _internal_has_underlayer_color();
}
inline void MapRenderer::clear_underlayer_color() {
  if (GetArena() == nullptr && underlayer_color_ != nullptr) {
    delete underlayer_color_;
  }
  underlayer_color_ = nullptr;
}
inline const ::rend::Color& MapRenderer::_internal_underlayer_color() const {
  const ::rend::Color* p = underlayer_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::rend::Color&>(
      ::rend::_Color_default_instance_);
}
inline const ::rend::Color& MapRenderer::underlayer_color() const {
  // @@protoc_insertion_point(field_get:rend.MapRenderer.underlayer_color)
  return _internal_underlayer_color();
}
inline void MapRenderer::unsafe_arena_set_allocated_underlayer_color(
    ::rend::Color* underlayer_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayer_color_);
  }
  underlayer_color_ = underlayer_color;
  if (underlayer_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rend.MapRenderer.underlayer_color)
}
inline ::rend::Color* MapRenderer::release_underlayer_color() {
  
  ::rend::Color* temp = underlayer_color_;
  underlayer_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::rend::Color* MapRenderer::unsafe_arena_release_underlayer_color() {
  // @@protoc_insertion_point(field_release:rend.MapRenderer.underlayer_color)
  
  ::rend::Color* temp = underlayer_color_;
  underlayer_color_ = nullptr;
  return temp;
}
inline ::rend::Color* MapRenderer::_internal_mutable_underlayer_color() {
  
  if (underlayer_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::rend::Color>(GetArena());
    underlayer_color_ = p;
  }
  return underlayer_color_;
}
inline ::rend::Color* MapRenderer::mutable_underlayer_color() {
  // @@protoc_insertion_point(field_mutable:rend.MapRenderer.underlayer_color)
  return _internal_mutable_underlayer_color();
}
inline void MapRenderer::set_allocated_underlayer_color(::rend::Color* underlayer_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete underlayer_color_;
  }
  if (underlayer_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(underlayer_color);
    if (message_arena != submessage_arena) {
      underlayer_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayer_color, submessage_arena);
    }
    
  } else {
    
  }
  underlayer_color_ = underlayer_color;
  // @@protoc_insertion_point(field_set_allocated:rend.MapRenderer.underlayer_color)
}

// double underlayer_width = 12;
inline void MapRenderer::clear_underlayer_width() {
  underlayer_width_ = 0;
}
inline double MapRenderer::_internal_underlayer_width() const {
  return underlayer_width_;
}
inline double MapRenderer::underlayer_width() const {
  // @@protoc_insertion_point(field_get:rend.MapRenderer.underlayer_width)
  return _internal_underlayer_width();
}
inline void MapRenderer::_internal_set_underlayer_width(double value) {
  
  underlayer_width_ = value;
}
inline void MapRenderer::set_underlayer_width(double value) {
  _internal_set_underlayer_width(value);
  // @@protoc_insertion_point(field_set:rend.MapRenderer.underlayer_width)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rend

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto
