// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#include "transport_catalogue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinates_transport_5fcatalogue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distance_transport_5fcatalogue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Route_transport_5fcatalogue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stop_transport_5fcatalogue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransportCatalogue_transport_5fcatalogue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_5frenderer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapRenderer_map_5frenderer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouterSettings_transport_5frouter_2eproto;
namespace catalogue {
class CoordinatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coordinates> _instance;
} _Coordinates_default_instance_;
class StopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stop> _instance;
} _Stop_default_instance_;
class RouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Route> _instance;
} _Route_default_instance_;
class DistanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distance> _instance;
} _Distance_default_instance_;
class TransportCatalogueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportCatalogue> _instance;
} _TransportCatalogue_default_instance_;
class WholeMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WholeMessage> _instance;
} _WholeMessage_default_instance_;
}  // namespace catalogue
static void InitDefaultsscc_info_Coordinates_transport_5fcatalogue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catalogue::_Coordinates_default_instance_;
    new (ptr) ::catalogue::Coordinates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinates_transport_5fcatalogue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Coordinates_transport_5fcatalogue_2eproto}, {}};

static void InitDefaultsscc_info_Distance_transport_5fcatalogue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catalogue::_Distance_default_instance_;
    new (ptr) ::catalogue::Distance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distance_transport_5fcatalogue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Distance_transport_5fcatalogue_2eproto}, {}};

static void InitDefaultsscc_info_Route_transport_5fcatalogue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catalogue::_Route_default_instance_;
    new (ptr) ::catalogue::Route();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Route_transport_5fcatalogue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Route_transport_5fcatalogue_2eproto}, {}};

static void InitDefaultsscc_info_Stop_transport_5fcatalogue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catalogue::_Stop_default_instance_;
    new (ptr) ::catalogue::Stop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stop_transport_5fcatalogue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Stop_transport_5fcatalogue_2eproto}, {
      &scc_info_Coordinates_transport_5fcatalogue_2eproto.base,}};

static void InitDefaultsscc_info_TransportCatalogue_transport_5fcatalogue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catalogue::_TransportCatalogue_default_instance_;
    new (ptr) ::catalogue::TransportCatalogue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransportCatalogue_transport_5fcatalogue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TransportCatalogue_transport_5fcatalogue_2eproto}, {
      &scc_info_Stop_transport_5fcatalogue_2eproto.base,
      &scc_info_Route_transport_5fcatalogue_2eproto.base,
      &scc_info_Distance_transport_5fcatalogue_2eproto.base,}};

static void InitDefaultsscc_info_WholeMessage_transport_5fcatalogue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catalogue::_WholeMessage_default_instance_;
    new (ptr) ::catalogue::WholeMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WholeMessage_transport_5fcatalogue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WholeMessage_transport_5fcatalogue_2eproto}, {
      &scc_info_TransportCatalogue_transport_5fcatalogue_2eproto.base,
      &scc_info_MapRenderer_map_5frenderer_2eproto.base,
      &scc_info_RouterSettings_transport_5frouter_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5fcatalogue_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_5fcatalogue_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalogue_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5fcatalogue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::catalogue::Coordinates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::catalogue::Coordinates, lat_),
  PROTOBUF_FIELD_OFFSET(::catalogue::Coordinates, lng_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::catalogue::Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::catalogue::Stop, name_),
  PROTOBUF_FIELD_OFFSET(::catalogue::Stop, coords_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::catalogue::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::catalogue::Route, name_),
  PROTOBUF_FIELD_OFFSET(::catalogue::Route, stop_names_),
  PROTOBUF_FIELD_OFFSET(::catalogue::Route, is_circular_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::catalogue::Distance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::catalogue::Distance, from_),
  PROTOBUF_FIELD_OFFSET(::catalogue::Distance, to_),
  PROTOBUF_FIELD_OFFSET(::catalogue::Distance, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::catalogue::TransportCatalogue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::catalogue::TransportCatalogue, all_stops_),
  PROTOBUF_FIELD_OFFSET(::catalogue::TransportCatalogue, all_routes_),
  PROTOBUF_FIELD_OFFSET(::catalogue::TransportCatalogue, distances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::catalogue::WholeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::catalogue::WholeMessage, catalogue_),
  PROTOBUF_FIELD_OFFSET(::catalogue::WholeMessage, renderer_),
  PROTOBUF_FIELD_OFFSET(::catalogue::WholeMessage, router_settings_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::catalogue::Coordinates)},
  { 7, -1, sizeof(::catalogue::Stop)},
  { 14, -1, sizeof(::catalogue::Route)},
  { 22, -1, sizeof(::catalogue::Distance)},
  { 30, -1, sizeof(::catalogue::TransportCatalogue)},
  { 38, -1, sizeof(::catalogue::WholeMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::catalogue::_Coordinates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::catalogue::_Stop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::catalogue::_Route_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::catalogue::_Distance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::catalogue::_TransportCatalogue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::catalogue::_WholeMessage_default_instance_),
};

const char descriptor_table_protodef_transport_5fcatalogue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031transport_catalogue.proto\022\tcatalogue\032\022"
  "map_renderer.proto\032\026transport_router.pro"
  "to\"\'\n\013Coordinates\022\013\n\003lat\030\001 \001(\001\022\013\n\003lng\030\002 "
  "\001(\001\"<\n\004Stop\022\014\n\004name\030\001 \001(\014\022&\n\006coords\030\002 \001("
  "\0132\026.catalogue.Coordinates\">\n\005Route\022\014\n\004na"
  "me\030\001 \001(\014\022\022\n\nstop_names\030\002 \003(\014\022\023\n\013is_circu"
  "lar\030\003 \001(\010\"6\n\010Distance\022\014\n\004from\030\001 \001(\014\022\n\n\002t"
  "o\030\002 \001(\014\022\020\n\010distance\030\003 \001(\001\"\206\001\n\022TransportC"
  "atalogue\022\"\n\tall_stops\030\001 \003(\0132\017.catalogue."
  "Stop\022$\n\nall_routes\030\002 \003(\0132\020.catalogue.Rou"
  "te\022&\n\tdistances\030\003 \003(\0132\023.catalogue.Distan"
  "ce\"\226\001\n\014WholeMessage\0220\n\tcatalogue\030\001 \001(\0132\035"
  ".catalogue.TransportCatalogue\022#\n\010rendere"
  "r\030\002 \001(\0132\021.rend.MapRenderer\022/\n\017router_set"
  "tings\030\003 \001(\0132\026.router.RouterSettingsb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5fcatalogue_2eproto_deps[2] = {
  &::descriptor_table_map_5frenderer_2eproto,
  &::descriptor_table_transport_5frouter_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transport_5fcatalogue_2eproto_sccs[6] = {
  &scc_info_Coordinates_transport_5fcatalogue_2eproto.base,
  &scc_info_Distance_transport_5fcatalogue_2eproto.base,
  &scc_info_Route_transport_5fcatalogue_2eproto.base,
  &scc_info_Stop_transport_5fcatalogue_2eproto.base,
  &scc_info_TransportCatalogue_transport_5fcatalogue_2eproto.base,
  &scc_info_WholeMessage_transport_5fcatalogue_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5fcatalogue_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto = {
  false, false, descriptor_table_protodef_transport_5fcatalogue_2eproto, "transport_catalogue.proto", 603,
  &descriptor_table_transport_5fcatalogue_2eproto_once, descriptor_table_transport_5fcatalogue_2eproto_sccs, descriptor_table_transport_5fcatalogue_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_transport_5fcatalogue_2eproto::offsets,
  file_level_metadata_transport_5fcatalogue_2eproto, 6, file_level_enum_descriptors_transport_5fcatalogue_2eproto, file_level_service_descriptors_transport_5fcatalogue_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transport_5fcatalogue_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transport_5fcatalogue_2eproto)), true);
namespace catalogue {

// ===================================================================

class Coordinates::_Internal {
 public:
};

Coordinates::Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catalogue.Coordinates)
}
Coordinates::Coordinates(const Coordinates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  // @@protoc_insertion_point(copy_constructor:catalogue.Coordinates)
}

void Coordinates::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
}

Coordinates::~Coordinates() {
  // @@protoc_insertion_point(destructor:catalogue.Coordinates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Coordinates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Coordinates::ArenaDtor(void* object) {
  Coordinates* _this = reinterpret_cast< Coordinates* >(object);
  (void)_this;
}
void Coordinates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Coordinates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coordinates& Coordinates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Coordinates_transport_5fcatalogue_2eproto.base);
  return *internal_default_instance();
}


void Coordinates::Clear() {
// @@protoc_insertion_point(message_clear_start:catalogue.Coordinates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lng_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coordinates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lng = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lng_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Coordinates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catalogue.Coordinates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // double lng = 2;
  if (!(this->lng() <= 0 && this->lng() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lng(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catalogue.Coordinates)
  return target;
}

size_t Coordinates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catalogue.Coordinates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lng = 2;
  if (!(this->lng() <= 0 && this->lng() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coordinates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:catalogue.Coordinates)
  GOOGLE_DCHECK_NE(&from, this);
  const Coordinates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Coordinates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:catalogue.Coordinates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:catalogue.Coordinates)
    MergeFrom(*source);
  }
}

void Coordinates::MergeFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catalogue.Coordinates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lng() <= 0 && from.lng() >= 0)) {
    _internal_set_lng(from._internal_lng());
  }
}

void Coordinates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:catalogue.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinates::CopyFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catalogue.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinates::IsInitialized() const {
  return true;
}

void Coordinates::InternalSwap(Coordinates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coordinates, lng_)
      + sizeof(Coordinates::lng_)
      - PROTOBUF_FIELD_OFFSET(Coordinates, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coordinates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Stop::_Internal {
 public:
  static const ::catalogue::Coordinates& coords(const Stop* msg);
};

const ::catalogue::Coordinates&
Stop::_Internal::coords(const Stop* msg) {
  return *msg->coords_;
}
Stop::Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catalogue.Stop)
}
Stop::Stop(const Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_coords()) {
    coords_ = new ::catalogue::Coordinates(*from.coords_);
  } else {
    coords_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:catalogue.Stop)
}

void Stop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stop_transport_5fcatalogue_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coords_ = nullptr;
}

Stop::~Stop() {
  // @@protoc_insertion_point(destructor:catalogue.Stop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coords_;
}

void Stop::ArenaDtor(void* object) {
  Stop* _this = reinterpret_cast< Stop* >(object);
  (void)_this;
}
void Stop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stop& Stop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stop_transport_5fcatalogue_2eproto.base);
  return *internal_default_instance();
}


void Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:catalogue.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && coords_ != nullptr) {
    delete coords_;
  }
  coords_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .catalogue.Coordinates coords = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coords(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catalogue.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .catalogue.Coordinates coords = 2;
  if (this->has_coords()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coords(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catalogue.Stop)
  return target;
}

size_t Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catalogue.Stop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .catalogue.Coordinates coords = 2;
  if (this->has_coords()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coords_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:catalogue.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  const Stop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:catalogue.Stop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:catalogue.Stop)
    MergeFrom(*source);
  }
}

void Stop::MergeFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catalogue.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_coords()) {
    _internal_mutable_coords()->::catalogue::Coordinates::MergeFrom(from._internal_coords());
  }
}

void Stop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:catalogue.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stop::CopyFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catalogue.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stop::IsInitialized() const {
  return true;
}

void Stop::InternalSwap(Stop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(coords_, other->coords_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Route::_Internal {
 public:
};

Route::Route(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stop_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catalogue.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stop_names_(from.stop_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  is_circular_ = from.is_circular_;
  // @@protoc_insertion_point(copy_constructor:catalogue.Route)
}

void Route::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Route_transport_5fcatalogue_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_circular_ = false;
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:catalogue.Route)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Route::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Route::ArenaDtor(void* object) {
  Route* _this = reinterpret_cast< Route* >(object);
  (void)_this;
}
void Route::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Route& Route::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Route_transport_5fcatalogue_2eproto.base);
  return *internal_default_instance();
}


void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:catalogue.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_names_.Clear();
  name_.ClearToEmpty();
  is_circular_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes stop_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stop_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_circular = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_circular_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Route::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catalogue.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated bytes stop_names = 2;
  for (int i = 0, n = this->_internal_stop_names_size(); i < n; i++) {
    const auto& s = this->_internal_stop_names(i);
    target = stream->WriteBytes(2, s, target);
  }

  // bool is_circular = 3;
  if (this->is_circular() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_circular(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catalogue.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catalogue.Route)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes stop_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stop_names_.size());
  for (int i = 0, n = stop_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      stop_names_.Get(i));
  }

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bool is_circular = 3;
  if (this->is_circular() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Route::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:catalogue.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const Route* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Route>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:catalogue.Route)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:catalogue.Route)
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catalogue.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stop_names_.MergeFrom(from.stop_names_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.is_circular() != 0) {
    _internal_set_is_circular(from._internal_is_circular());
  }
}

void Route::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:catalogue.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catalogue.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::InternalSwap(Route* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stop_names_.InternalSwap(&other->stop_names_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_circular_, other->is_circular_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Distance::_Internal {
 public:
};

Distance::Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catalogue.Distance)
}
Distance::Distance(const Distance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArena());
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:catalogue.Distance)
}

void Distance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Distance_transport_5fcatalogue_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distance_ = 0;
}

Distance::~Distance() {
  // @@protoc_insertion_point(destructor:catalogue.Distance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Distance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Distance::ArenaDtor(void* object) {
  Distance* _this = reinterpret_cast< Distance* >(object);
  (void)_this;
}
void Distance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distance& Distance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distance_transport_5fcatalogue_2eproto.base);
  return *internal_default_instance();
}


void Distance::Clear() {
// @@protoc_insertion_point(message_clear_start:catalogue.Distance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Distance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catalogue.Distance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes to = 2;
  if (this->to().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catalogue.Distance)
  return target;
}

size_t Distance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catalogue.Distance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:catalogue.Distance)
  GOOGLE_DCHECK_NE(&from, this);
  const Distance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:catalogue.Distance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:catalogue.Distance)
    MergeFrom(*source);
  }
}

void Distance::MergeFrom(const Distance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catalogue.Distance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to().size() > 0) {
    _internal_set_to(from._internal_to());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
}

void Distance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:catalogue.Distance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distance::CopyFrom(const Distance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catalogue.Distance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distance::IsInitialized() const {
  return true;
}

void Distance::InternalSwap(Distance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransportCatalogue::_Internal {
 public:
};

TransportCatalogue::TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  all_stops_(arena),
  all_routes_(arena),
  distances_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catalogue.TransportCatalogue)
}
TransportCatalogue::TransportCatalogue(const TransportCatalogue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      all_stops_(from.all_stops_),
      all_routes_(from.all_routes_),
      distances_(from.distances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:catalogue.TransportCatalogue)
}

void TransportCatalogue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransportCatalogue_transport_5fcatalogue_2eproto.base);
}

TransportCatalogue::~TransportCatalogue() {
  // @@protoc_insertion_point(destructor:catalogue.TransportCatalogue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransportCatalogue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransportCatalogue::ArenaDtor(void* object) {
  TransportCatalogue* _this = reinterpret_cast< TransportCatalogue* >(object);
  (void)_this;
}
void TransportCatalogue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportCatalogue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransportCatalogue& TransportCatalogue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransportCatalogue_transport_5fcatalogue_2eproto.base);
  return *internal_default_instance();
}


void TransportCatalogue::Clear() {
// @@protoc_insertion_point(message_clear_start:catalogue.TransportCatalogue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_stops_.Clear();
  all_routes_.Clear();
  distances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportCatalogue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .catalogue.Stop all_stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .catalogue.Route all_routes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .catalogue.Distance distances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_distances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportCatalogue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catalogue.TransportCatalogue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .catalogue.Stop all_stops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_all_stops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_all_stops(i), target, stream);
  }

  // repeated .catalogue.Route all_routes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_all_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_all_routes(i), target, stream);
  }

  // repeated .catalogue.Distance distances = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_distances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_distances(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catalogue.TransportCatalogue)
  return target;
}

size_t TransportCatalogue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catalogue.TransportCatalogue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .catalogue.Stop all_stops = 1;
  total_size += 1UL * this->_internal_all_stops_size();
  for (const auto& msg : this->all_stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .catalogue.Route all_routes = 2;
  total_size += 1UL * this->_internal_all_routes_size();
  for (const auto& msg : this->all_routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .catalogue.Distance distances = 3;
  total_size += 1UL * this->_internal_distances_size();
  for (const auto& msg : this->distances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportCatalogue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:catalogue.TransportCatalogue)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportCatalogue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportCatalogue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:catalogue.TransportCatalogue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:catalogue.TransportCatalogue)
    MergeFrom(*source);
  }
}

void TransportCatalogue::MergeFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catalogue.TransportCatalogue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_stops_.MergeFrom(from.all_stops_);
  all_routes_.MergeFrom(from.all_routes_);
  distances_.MergeFrom(from.distances_);
}

void TransportCatalogue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:catalogue.TransportCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportCatalogue::CopyFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catalogue.TransportCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalogue::IsInitialized() const {
  return true;
}

void TransportCatalogue::InternalSwap(TransportCatalogue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  all_stops_.InternalSwap(&other->all_stops_);
  all_routes_.InternalSwap(&other->all_routes_);
  distances_.InternalSwap(&other->distances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalogue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WholeMessage::_Internal {
 public:
  static const ::catalogue::TransportCatalogue& catalogue(const WholeMessage* msg);
  static const ::rend::MapRenderer& renderer(const WholeMessage* msg);
  static const ::router::RouterSettings& router_settings(const WholeMessage* msg);
};

const ::catalogue::TransportCatalogue&
WholeMessage::_Internal::catalogue(const WholeMessage* msg) {
  return *msg->catalogue_;
}
const ::rend::MapRenderer&
WholeMessage::_Internal::renderer(const WholeMessage* msg) {
  return *msg->renderer_;
}
const ::router::RouterSettings&
WholeMessage::_Internal::router_settings(const WholeMessage* msg) {
  return *msg->router_settings_;
}
void WholeMessage::clear_renderer() {
  if (GetArena() == nullptr && renderer_ != nullptr) {
    delete renderer_;
  }
  renderer_ = nullptr;
}
void WholeMessage::clear_router_settings() {
  if (GetArena() == nullptr && router_settings_ != nullptr) {
    delete router_settings_;
  }
  router_settings_ = nullptr;
}
WholeMessage::WholeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catalogue.WholeMessage)
}
WholeMessage::WholeMessage(const WholeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_catalogue()) {
    catalogue_ = new ::catalogue::TransportCatalogue(*from.catalogue_);
  } else {
    catalogue_ = nullptr;
  }
  if (from._internal_has_renderer()) {
    renderer_ = new ::rend::MapRenderer(*from.renderer_);
  } else {
    renderer_ = nullptr;
  }
  if (from._internal_has_router_settings()) {
    router_settings_ = new ::router::RouterSettings(*from.router_settings_);
  } else {
    router_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:catalogue.WholeMessage)
}

void WholeMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WholeMessage_transport_5fcatalogue_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&catalogue_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&router_settings_) -
      reinterpret_cast<char*>(&catalogue_)) + sizeof(router_settings_));
}

WholeMessage::~WholeMessage() {
  // @@protoc_insertion_point(destructor:catalogue.WholeMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WholeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete catalogue_;
  if (this != internal_default_instance()) delete renderer_;
  if (this != internal_default_instance()) delete router_settings_;
}

void WholeMessage::ArenaDtor(void* object) {
  WholeMessage* _this = reinterpret_cast< WholeMessage* >(object);
  (void)_this;
}
void WholeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WholeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WholeMessage& WholeMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WholeMessage_transport_5fcatalogue_2eproto.base);
  return *internal_default_instance();
}


void WholeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:catalogue.WholeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && catalogue_ != nullptr) {
    delete catalogue_;
  }
  catalogue_ = nullptr;
  if (GetArena() == nullptr && renderer_ != nullptr) {
    delete renderer_;
  }
  renderer_ = nullptr;
  if (GetArena() == nullptr && router_settings_ != nullptr) {
    delete router_settings_;
  }
  router_settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WholeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .catalogue.TransportCatalogue catalogue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_catalogue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rend.MapRenderer renderer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_renderer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .router.RouterSettings router_settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_router_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WholeMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catalogue.WholeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .catalogue.TransportCatalogue catalogue = 1;
  if (this->has_catalogue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::catalogue(this), target, stream);
  }

  // .rend.MapRenderer renderer = 2;
  if (this->has_renderer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::renderer(this), target, stream);
  }

  // .router.RouterSettings router_settings = 3;
  if (this->has_router_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::router_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catalogue.WholeMessage)
  return target;
}

size_t WholeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catalogue.WholeMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .catalogue.TransportCatalogue catalogue = 1;
  if (this->has_catalogue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *catalogue_);
  }

  // .rend.MapRenderer renderer = 2;
  if (this->has_renderer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *renderer_);
  }

  // .router.RouterSettings router_settings = 3;
  if (this->has_router_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *router_settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WholeMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:catalogue.WholeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WholeMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WholeMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:catalogue.WholeMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:catalogue.WholeMessage)
    MergeFrom(*source);
  }
}

void WholeMessage::MergeFrom(const WholeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catalogue.WholeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_catalogue()) {
    _internal_mutable_catalogue()->::catalogue::TransportCatalogue::MergeFrom(from._internal_catalogue());
  }
  if (from.has_renderer()) {
    _internal_mutable_renderer()->::rend::MapRenderer::MergeFrom(from._internal_renderer());
  }
  if (from.has_router_settings()) {
    _internal_mutable_router_settings()->::router::RouterSettings::MergeFrom(from._internal_router_settings());
  }
}

void WholeMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:catalogue.WholeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WholeMessage::CopyFrom(const WholeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catalogue.WholeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WholeMessage::IsInitialized() const {
  return true;
}

void WholeMessage::InternalSwap(WholeMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WholeMessage, router_settings_)
      + sizeof(WholeMessage::router_settings_)
      - PROTOBUF_FIELD_OFFSET(WholeMessage, catalogue_)>(
          reinterpret_cast<char*>(&catalogue_),
          reinterpret_cast<char*>(&other->catalogue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WholeMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace catalogue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::catalogue::Coordinates* Arena::CreateMaybeMessage< ::catalogue::Coordinates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catalogue::Coordinates >(arena);
}
template<> PROTOBUF_NOINLINE ::catalogue::Stop* Arena::CreateMaybeMessage< ::catalogue::Stop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catalogue::Stop >(arena);
}
template<> PROTOBUF_NOINLINE ::catalogue::Route* Arena::CreateMaybeMessage< ::catalogue::Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catalogue::Route >(arena);
}
template<> PROTOBUF_NOINLINE ::catalogue::Distance* Arena::CreateMaybeMessage< ::catalogue::Distance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catalogue::Distance >(arena);
}
template<> PROTOBUF_NOINLINE ::catalogue::TransportCatalogue* Arena::CreateMaybeMessage< ::catalogue::TransportCatalogue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catalogue::TransportCatalogue >(arena);
}
template<> PROTOBUF_NOINLINE ::catalogue::WholeMessage* Arena::CreateMaybeMessage< ::catalogue::WholeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catalogue::WholeMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
