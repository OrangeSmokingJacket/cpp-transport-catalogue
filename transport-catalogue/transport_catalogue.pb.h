// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace catalogue {
class Coordinates;
class CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class Distance;
class DistanceDefaultTypeInternal;
extern DistanceDefaultTypeInternal _Distance_default_instance_;
class Route;
class RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
class Stop;
class StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
class TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
class WholeMessage;
class WholeMessageDefaultTypeInternal;
extern WholeMessageDefaultTypeInternal _WholeMessage_default_instance_;
}  // namespace catalogue
PROTOBUF_NAMESPACE_OPEN
template<> ::catalogue::Coordinates* Arena::CreateMaybeMessage<::catalogue::Coordinates>(Arena*);
template<> ::catalogue::Distance* Arena::CreateMaybeMessage<::catalogue::Distance>(Arena*);
template<> ::catalogue::Route* Arena::CreateMaybeMessage<::catalogue::Route>(Arena*);
template<> ::catalogue::Stop* Arena::CreateMaybeMessage<::catalogue::Stop>(Arena*);
template<> ::catalogue::TransportCatalogue* Arena::CreateMaybeMessage<::catalogue::TransportCatalogue>(Arena*);
template<> ::catalogue::WholeMessage* Arena::CreateMaybeMessage<::catalogue::WholeMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace catalogue {

// ===================================================================

class Coordinates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalogue.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  virtual ~Coordinates();

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coordinates& default_instance();

  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coordinates* New() const final {
    return CreateMaybeMessage<Coordinates>(nullptr);
  }

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coordinates& from);
  void MergeFrom(const Coordinates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalogue.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:catalogue.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lng_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalogue.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  virtual ~Stop();

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stop& default_instance();

  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stop* New() const final {
    return CreateMaybeMessage<Stop>(nullptr);
  }

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stop& from);
  void MergeFrom(const Stop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalogue.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCoordsFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .catalogue.Coordinates coords = 2;
  bool has_coords() const;
  private:
  bool _internal_has_coords() const;
  public:
  void clear_coords();
  const ::catalogue::Coordinates& coords() const;
  ::catalogue::Coordinates* release_coords();
  ::catalogue::Coordinates* mutable_coords();
  void set_allocated_coords(::catalogue::Coordinates* coords);
  private:
  const ::catalogue::Coordinates& _internal_coords() const;
  ::catalogue::Coordinates* _internal_mutable_coords();
  public:
  void unsafe_arena_set_allocated_coords(
      ::catalogue::Coordinates* coords);
  ::catalogue::Coordinates* unsafe_arena_release_coords();

  // @@protoc_insertion_point(class_scope:catalogue.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::catalogue::Coordinates* coords_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Route PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalogue.Route) */ {
 public:
  inline Route() : Route(nullptr) {}
  virtual ~Route();

  Route(const Route& from);
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Route& default_instance();

  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Route* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Route* New() const final {
    return CreateMaybeMessage<Route>(nullptr);
  }

  Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Route& from);
  void MergeFrom(const Route& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalogue.Route";
  }
  protected:
  explicit Route(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopNamesFieldNumber = 2,
    kNameFieldNumber = 1,
    kIsCircularFieldNumber = 3,
  };
  // repeated bytes stop_names = 2;
  int stop_names_size() const;
  private:
  int _internal_stop_names_size() const;
  public:
  void clear_stop_names();
  const std::string& stop_names(int index) const;
  std::string* mutable_stop_names(int index);
  void set_stop_names(int index, const std::string& value);
  void set_stop_names(int index, std::string&& value);
  void set_stop_names(int index, const char* value);
  void set_stop_names(int index, const void* value, size_t size);
  std::string* add_stop_names();
  void add_stop_names(const std::string& value);
  void add_stop_names(std::string&& value);
  void add_stop_names(const char* value);
  void add_stop_names(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stop_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stop_names();
  private:
  const std::string& _internal_stop_names(int index) const;
  std::string* _internal_add_stop_names();
  public:

  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_circular = 3;
  void clear_is_circular();
  bool is_circular() const;
  void set_is_circular(bool value);
  private:
  bool _internal_is_circular() const;
  void _internal_set_is_circular(bool value);
  public:

  // @@protoc_insertion_point(class_scope:catalogue.Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stop_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool is_circular_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Distance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalogue.Distance) */ {
 public:
  inline Distance() : Distance(nullptr) {}
  virtual ~Distance();

  Distance(const Distance& from);
  Distance(Distance&& from) noexcept
    : Distance() {
    *this = ::std::move(from);
  }

  inline Distance& operator=(const Distance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distance& operator=(Distance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Distance& default_instance();

  static inline const Distance* internal_default_instance() {
    return reinterpret_cast<const Distance*>(
               &_Distance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Distance& a, Distance& b) {
    a.Swap(&b);
  }
  inline void Swap(Distance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Distance* New() const final {
    return CreateMaybeMessage<Distance>(nullptr);
  }

  Distance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Distance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Distance& from);
  void MergeFrom(const Distance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalogue.Distance";
  }
  protected:
  explicit Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // double distance = 3;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:catalogue.Distance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  double distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalogue.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  virtual ~TransportCatalogue();

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransportCatalogue& default_instance();

  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportCatalogue* New() const final {
    return CreateMaybeMessage<TransportCatalogue>(nullptr);
  }

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransportCatalogue& from);
  void MergeFrom(const TransportCatalogue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalogue.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllStopsFieldNumber = 1,
    kAllRoutesFieldNumber = 2,
    kDistancesFieldNumber = 3,
  };
  // repeated .catalogue.Stop all_stops = 1;
  int all_stops_size() const;
  private:
  int _internal_all_stops_size() const;
  public:
  void clear_all_stops();
  ::catalogue::Stop* mutable_all_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Stop >*
      mutable_all_stops();
  private:
  const ::catalogue::Stop& _internal_all_stops(int index) const;
  ::catalogue::Stop* _internal_add_all_stops();
  public:
  const ::catalogue::Stop& all_stops(int index) const;
  ::catalogue::Stop* add_all_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Stop >&
      all_stops() const;

  // repeated .catalogue.Route all_routes = 2;
  int all_routes_size() const;
  private:
  int _internal_all_routes_size() const;
  public:
  void clear_all_routes();
  ::catalogue::Route* mutable_all_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Route >*
      mutable_all_routes();
  private:
  const ::catalogue::Route& _internal_all_routes(int index) const;
  ::catalogue::Route* _internal_add_all_routes();
  public:
  const ::catalogue::Route& all_routes(int index) const;
  ::catalogue::Route* add_all_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Route >&
      all_routes() const;

  // repeated .catalogue.Distance distances = 3;
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  ::catalogue::Distance* mutable_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Distance >*
      mutable_distances();
  private:
  const ::catalogue::Distance& _internal_distances(int index) const;
  ::catalogue::Distance* _internal_add_distances();
  public:
  const ::catalogue::Distance& distances(int index) const;
  ::catalogue::Distance* add_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Distance >&
      distances() const;

  // @@protoc_insertion_point(class_scope:catalogue.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Stop > all_stops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Route > all_routes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Distance > distances_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class WholeMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalogue.WholeMessage) */ {
 public:
  inline WholeMessage() : WholeMessage(nullptr) {}
  virtual ~WholeMessage();

  WholeMessage(const WholeMessage& from);
  WholeMessage(WholeMessage&& from) noexcept
    : WholeMessage() {
    *this = ::std::move(from);
  }

  inline WholeMessage& operator=(const WholeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WholeMessage& operator=(WholeMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WholeMessage& default_instance();

  static inline const WholeMessage* internal_default_instance() {
    return reinterpret_cast<const WholeMessage*>(
               &_WholeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WholeMessage& a, WholeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WholeMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WholeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WholeMessage* New() const final {
    return CreateMaybeMessage<WholeMessage>(nullptr);
  }

  WholeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WholeMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WholeMessage& from);
  void MergeFrom(const WholeMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WholeMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalogue.WholeMessage";
  }
  protected:
  explicit WholeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCatalogueFieldNumber = 1,
    kRendererFieldNumber = 2,
    kRouterSettingsFieldNumber = 3,
  };
  // .catalogue.TransportCatalogue catalogue = 1;
  bool has_catalogue() const;
  private:
  bool _internal_has_catalogue() const;
  public:
  void clear_catalogue();
  const ::catalogue::TransportCatalogue& catalogue() const;
  ::catalogue::TransportCatalogue* release_catalogue();
  ::catalogue::TransportCatalogue* mutable_catalogue();
  void set_allocated_catalogue(::catalogue::TransportCatalogue* catalogue);
  private:
  const ::catalogue::TransportCatalogue& _internal_catalogue() const;
  ::catalogue::TransportCatalogue* _internal_mutable_catalogue();
  public:
  void unsafe_arena_set_allocated_catalogue(
      ::catalogue::TransportCatalogue* catalogue);
  ::catalogue::TransportCatalogue* unsafe_arena_release_catalogue();

  // .rend.MapRenderer renderer = 2;
  bool has_renderer() const;
  private:
  bool _internal_has_renderer() const;
  public:
  void clear_renderer();
  const ::rend::MapRenderer& renderer() const;
  ::rend::MapRenderer* release_renderer();
  ::rend::MapRenderer* mutable_renderer();
  void set_allocated_renderer(::rend::MapRenderer* renderer);
  private:
  const ::rend::MapRenderer& _internal_renderer() const;
  ::rend::MapRenderer* _internal_mutable_renderer();
  public:
  void unsafe_arena_set_allocated_renderer(
      ::rend::MapRenderer* renderer);
  ::rend::MapRenderer* unsafe_arena_release_renderer();

  // .router.RouterSettings router_settings = 3;
  bool has_router_settings() const;
  private:
  bool _internal_has_router_settings() const;
  public:
  void clear_router_settings();
  const ::router::RouterSettings& router_settings() const;
  ::router::RouterSettings* release_router_settings();
  ::router::RouterSettings* mutable_router_settings();
  void set_allocated_router_settings(::router::RouterSettings* router_settings);
  private:
  const ::router::RouterSettings& _internal_router_settings() const;
  ::router::RouterSettings* _internal_mutable_router_settings();
  public:
  void unsafe_arena_set_allocated_router_settings(
      ::router::RouterSettings* router_settings);
  ::router::RouterSettings* unsafe_arena_release_router_settings();

  // @@protoc_insertion_point(class_scope:catalogue.WholeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::catalogue::TransportCatalogue* catalogue_;
  ::rend::MapRenderer* renderer_;
  ::router::RouterSettings* router_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double lat = 1;
inline void Coordinates::clear_lat() {
  lat_ = 0;
}
inline double Coordinates::_internal_lat() const {
  return lat_;
}
inline double Coordinates::lat() const {
  // @@protoc_insertion_point(field_get:catalogue.Coordinates.lat)
  return _internal_lat();
}
inline void Coordinates::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Coordinates::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:catalogue.Coordinates.lat)
}

// double lng = 2;
inline void Coordinates::clear_lng() {
  lng_ = 0;
}
inline double Coordinates::_internal_lng() const {
  return lng_;
}
inline double Coordinates::lng() const {
  // @@protoc_insertion_point(field_get:catalogue.Coordinates.lng)
  return _internal_lng();
}
inline void Coordinates::_internal_set_lng(double value) {
  
  lng_ = value;
}
inline void Coordinates::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:catalogue.Coordinates.lng)
}

// -------------------------------------------------------------------

// Stop

// bytes name = 1;
inline void Stop::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:catalogue.Stop.name)
  return _internal_name();
}
inline void Stop::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:catalogue.Stop.name)
}
inline std::string* Stop::mutable_name() {
  // @@protoc_insertion_point(field_mutable:catalogue.Stop.name)
  return _internal_mutable_name();
}
inline const std::string& Stop::_internal_name() const {
  return name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Stop::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:catalogue.Stop.name)
}
inline void Stop::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:catalogue.Stop.name)
}
inline void Stop::set_name(const void* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:catalogue.Stop.name)
}
inline std::string* Stop::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:catalogue.Stop.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:catalogue.Stop.name)
}

// .catalogue.Coordinates coords = 2;
inline bool Stop::_internal_has_coords() const {
  return this != internal_default_instance() && coords_ != nullptr;
}
inline bool Stop::has_coords() const {
  return _internal_has_coords();
}
inline void Stop::clear_coords() {
  if (GetArena() == nullptr && coords_ != nullptr) {
    delete coords_;
  }
  coords_ = nullptr;
}
inline const ::catalogue::Coordinates& Stop::_internal_coords() const {
  const ::catalogue::Coordinates* p = coords_;
  return p != nullptr ? *p : reinterpret_cast<const ::catalogue::Coordinates&>(
      ::catalogue::_Coordinates_default_instance_);
}
inline const ::catalogue::Coordinates& Stop::coords() const {
  // @@protoc_insertion_point(field_get:catalogue.Stop.coords)
  return _internal_coords();
}
inline void Stop::unsafe_arena_set_allocated_coords(
    ::catalogue::Coordinates* coords) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coords_);
  }
  coords_ = coords;
  if (coords) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalogue.Stop.coords)
}
inline ::catalogue::Coordinates* Stop::release_coords() {
  
  ::catalogue::Coordinates* temp = coords_;
  coords_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::catalogue::Coordinates* Stop::unsafe_arena_release_coords() {
  // @@protoc_insertion_point(field_release:catalogue.Stop.coords)
  
  ::catalogue::Coordinates* temp = coords_;
  coords_ = nullptr;
  return temp;
}
inline ::catalogue::Coordinates* Stop::_internal_mutable_coords() {
  
  if (coords_ == nullptr) {
    auto* p = CreateMaybeMessage<::catalogue::Coordinates>(GetArena());
    coords_ = p;
  }
  return coords_;
}
inline ::catalogue::Coordinates* Stop::mutable_coords() {
  // @@protoc_insertion_point(field_mutable:catalogue.Stop.coords)
  return _internal_mutable_coords();
}
inline void Stop::set_allocated_coords(::catalogue::Coordinates* coords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coords_;
  }
  if (coords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coords);
    if (message_arena != submessage_arena) {
      coords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coords, submessage_arena);
    }
    
  } else {
    
  }
  coords_ = coords;
  // @@protoc_insertion_point(field_set_allocated:catalogue.Stop.coords)
}

// -------------------------------------------------------------------

// Route

// bytes name = 1;
inline void Route::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Route::name() const {
  // @@protoc_insertion_point(field_get:catalogue.Route.name)
  return _internal_name();
}
inline void Route::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:catalogue.Route.name)
}
inline std::string* Route::mutable_name() {
  // @@protoc_insertion_point(field_mutable:catalogue.Route.name)
  return _internal_mutable_name();
}
inline const std::string& Route::_internal_name() const {
  return name_.Get();
}
inline void Route::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Route::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:catalogue.Route.name)
}
inline void Route::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:catalogue.Route.name)
}
inline void Route::set_name(const void* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:catalogue.Route.name)
}
inline std::string* Route::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Route::release_name() {
  // @@protoc_insertion_point(field_release:catalogue.Route.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Route::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:catalogue.Route.name)
}

// repeated bytes stop_names = 2;
inline int Route::_internal_stop_names_size() const {
  return stop_names_.size();
}
inline int Route::stop_names_size() const {
  return _internal_stop_names_size();
}
inline void Route::clear_stop_names() {
  stop_names_.Clear();
}
inline std::string* Route::add_stop_names() {
  // @@protoc_insertion_point(field_add_mutable:catalogue.Route.stop_names)
  return _internal_add_stop_names();
}
inline const std::string& Route::_internal_stop_names(int index) const {
  return stop_names_.Get(index);
}
inline const std::string& Route::stop_names(int index) const {
  // @@protoc_insertion_point(field_get:catalogue.Route.stop_names)
  return _internal_stop_names(index);
}
inline std::string* Route::mutable_stop_names(int index) {
  // @@protoc_insertion_point(field_mutable:catalogue.Route.stop_names)
  return stop_names_.Mutable(index);
}
inline void Route::set_stop_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:catalogue.Route.stop_names)
  stop_names_.Mutable(index)->assign(value);
}
inline void Route::set_stop_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:catalogue.Route.stop_names)
  stop_names_.Mutable(index)->assign(std::move(value));
}
inline void Route::set_stop_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stop_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:catalogue.Route.stop_names)
}
inline void Route::set_stop_names(int index, const void* value, size_t size) {
  stop_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:catalogue.Route.stop_names)
}
inline std::string* Route::_internal_add_stop_names() {
  return stop_names_.Add();
}
inline void Route::add_stop_names(const std::string& value) {
  stop_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:catalogue.Route.stop_names)
}
inline void Route::add_stop_names(std::string&& value) {
  stop_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:catalogue.Route.stop_names)
}
inline void Route::add_stop_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stop_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:catalogue.Route.stop_names)
}
inline void Route::add_stop_names(const void* value, size_t size) {
  stop_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:catalogue.Route.stop_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Route::stop_names() const {
  // @@protoc_insertion_point(field_list:catalogue.Route.stop_names)
  return stop_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Route::mutable_stop_names() {
  // @@protoc_insertion_point(field_mutable_list:catalogue.Route.stop_names)
  return &stop_names_;
}

// bool is_circular = 3;
inline void Route::clear_is_circular() {
  is_circular_ = false;
}
inline bool Route::_internal_is_circular() const {
  return is_circular_;
}
inline bool Route::is_circular() const {
  // @@protoc_insertion_point(field_get:catalogue.Route.is_circular)
  return _internal_is_circular();
}
inline void Route::_internal_set_is_circular(bool value) {
  
  is_circular_ = value;
}
inline void Route::set_is_circular(bool value) {
  _internal_set_is_circular(value);
  // @@protoc_insertion_point(field_set:catalogue.Route.is_circular)
}

// -------------------------------------------------------------------

// Distance

// bytes from = 1;
inline void Distance::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& Distance::from() const {
  // @@protoc_insertion_point(field_get:catalogue.Distance.from)
  return _internal_from();
}
inline void Distance::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:catalogue.Distance.from)
}
inline std::string* Distance::mutable_from() {
  // @@protoc_insertion_point(field_mutable:catalogue.Distance.from)
  return _internal_mutable_from();
}
inline const std::string& Distance::_internal_from() const {
  return from_.Get();
}
inline void Distance::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Distance::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:catalogue.Distance.from)
}
inline void Distance::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:catalogue.Distance.from)
}
inline void Distance::set_from(const void* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:catalogue.Distance.from)
}
inline std::string* Distance::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Distance::release_from() {
  // @@protoc_insertion_point(field_release:catalogue.Distance.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Distance::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:catalogue.Distance.from)
}

// bytes to = 2;
inline void Distance::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& Distance::to() const {
  // @@protoc_insertion_point(field_get:catalogue.Distance.to)
  return _internal_to();
}
inline void Distance::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:catalogue.Distance.to)
}
inline std::string* Distance::mutable_to() {
  // @@protoc_insertion_point(field_mutable:catalogue.Distance.to)
  return _internal_mutable_to();
}
inline const std::string& Distance::_internal_to() const {
  return to_.Get();
}
inline void Distance::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Distance::set_to(std::string&& value) {
  
  to_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:catalogue.Distance.to)
}
inline void Distance::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:catalogue.Distance.to)
}
inline void Distance::set_to(const void* value,
    size_t size) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:catalogue.Distance.to)
}
inline std::string* Distance::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Distance::release_to() {
  // @@protoc_insertion_point(field_release:catalogue.Distance.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Distance::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:catalogue.Distance.to)
}

// double distance = 3;
inline void Distance::clear_distance() {
  distance_ = 0;
}
inline double Distance::_internal_distance() const {
  return distance_;
}
inline double Distance::distance() const {
  // @@protoc_insertion_point(field_get:catalogue.Distance.distance)
  return _internal_distance();
}
inline void Distance::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void Distance::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:catalogue.Distance.distance)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .catalogue.Stop all_stops = 1;
inline int TransportCatalogue::_internal_all_stops_size() const {
  return all_stops_.size();
}
inline int TransportCatalogue::all_stops_size() const {
  return _internal_all_stops_size();
}
inline void TransportCatalogue::clear_all_stops() {
  all_stops_.Clear();
}
inline ::catalogue::Stop* TransportCatalogue::mutable_all_stops(int index) {
  // @@protoc_insertion_point(field_mutable:catalogue.TransportCatalogue.all_stops)
  return all_stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Stop >*
TransportCatalogue::mutable_all_stops() {
  // @@protoc_insertion_point(field_mutable_list:catalogue.TransportCatalogue.all_stops)
  return &all_stops_;
}
inline const ::catalogue::Stop& TransportCatalogue::_internal_all_stops(int index) const {
  return all_stops_.Get(index);
}
inline const ::catalogue::Stop& TransportCatalogue::all_stops(int index) const {
  // @@protoc_insertion_point(field_get:catalogue.TransportCatalogue.all_stops)
  return _internal_all_stops(index);
}
inline ::catalogue::Stop* TransportCatalogue::_internal_add_all_stops() {
  return all_stops_.Add();
}
inline ::catalogue::Stop* TransportCatalogue::add_all_stops() {
  // @@protoc_insertion_point(field_add:catalogue.TransportCatalogue.all_stops)
  return _internal_add_all_stops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Stop >&
TransportCatalogue::all_stops() const {
  // @@protoc_insertion_point(field_list:catalogue.TransportCatalogue.all_stops)
  return all_stops_;
}

// repeated .catalogue.Route all_routes = 2;
inline int TransportCatalogue::_internal_all_routes_size() const {
  return all_routes_.size();
}
inline int TransportCatalogue::all_routes_size() const {
  return _internal_all_routes_size();
}
inline void TransportCatalogue::clear_all_routes() {
  all_routes_.Clear();
}
inline ::catalogue::Route* TransportCatalogue::mutable_all_routes(int index) {
  // @@protoc_insertion_point(field_mutable:catalogue.TransportCatalogue.all_routes)
  return all_routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Route >*
TransportCatalogue::mutable_all_routes() {
  // @@protoc_insertion_point(field_mutable_list:catalogue.TransportCatalogue.all_routes)
  return &all_routes_;
}
inline const ::catalogue::Route& TransportCatalogue::_internal_all_routes(int index) const {
  return all_routes_.Get(index);
}
inline const ::catalogue::Route& TransportCatalogue::all_routes(int index) const {
  // @@protoc_insertion_point(field_get:catalogue.TransportCatalogue.all_routes)
  return _internal_all_routes(index);
}
inline ::catalogue::Route* TransportCatalogue::_internal_add_all_routes() {
  return all_routes_.Add();
}
inline ::catalogue::Route* TransportCatalogue::add_all_routes() {
  // @@protoc_insertion_point(field_add:catalogue.TransportCatalogue.all_routes)
  return _internal_add_all_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Route >&
TransportCatalogue::all_routes() const {
  // @@protoc_insertion_point(field_list:catalogue.TransportCatalogue.all_routes)
  return all_routes_;
}

// repeated .catalogue.Distance distances = 3;
inline int TransportCatalogue::_internal_distances_size() const {
  return distances_.size();
}
inline int TransportCatalogue::distances_size() const {
  return _internal_distances_size();
}
inline void TransportCatalogue::clear_distances() {
  distances_.Clear();
}
inline ::catalogue::Distance* TransportCatalogue::mutable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:catalogue.TransportCatalogue.distances)
  return distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Distance >*
TransportCatalogue::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:catalogue.TransportCatalogue.distances)
  return &distances_;
}
inline const ::catalogue::Distance& TransportCatalogue::_internal_distances(int index) const {
  return distances_.Get(index);
}
inline const ::catalogue::Distance& TransportCatalogue::distances(int index) const {
  // @@protoc_insertion_point(field_get:catalogue.TransportCatalogue.distances)
  return _internal_distances(index);
}
inline ::catalogue::Distance* TransportCatalogue::_internal_add_distances() {
  return distances_.Add();
}
inline ::catalogue::Distance* TransportCatalogue::add_distances() {
  // @@protoc_insertion_point(field_add:catalogue.TransportCatalogue.distances)
  return _internal_add_distances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalogue::Distance >&
TransportCatalogue::distances() const {
  // @@protoc_insertion_point(field_list:catalogue.TransportCatalogue.distances)
  return distances_;
}

// -------------------------------------------------------------------

// WholeMessage

// .catalogue.TransportCatalogue catalogue = 1;
inline bool WholeMessage::_internal_has_catalogue() const {
  return this != internal_default_instance() && catalogue_ != nullptr;
}
inline bool WholeMessage::has_catalogue() const {
  return _internal_has_catalogue();
}
inline void WholeMessage::clear_catalogue() {
  if (GetArena() == nullptr && catalogue_ != nullptr) {
    delete catalogue_;
  }
  catalogue_ = nullptr;
}
inline const ::catalogue::TransportCatalogue& WholeMessage::_internal_catalogue() const {
  const ::catalogue::TransportCatalogue* p = catalogue_;
  return p != nullptr ? *p : reinterpret_cast<const ::catalogue::TransportCatalogue&>(
      ::catalogue::_TransportCatalogue_default_instance_);
}
inline const ::catalogue::TransportCatalogue& WholeMessage::catalogue() const {
  // @@protoc_insertion_point(field_get:catalogue.WholeMessage.catalogue)
  return _internal_catalogue();
}
inline void WholeMessage::unsafe_arena_set_allocated_catalogue(
    ::catalogue::TransportCatalogue* catalogue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(catalogue_);
  }
  catalogue_ = catalogue;
  if (catalogue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalogue.WholeMessage.catalogue)
}
inline ::catalogue::TransportCatalogue* WholeMessage::release_catalogue() {
  
  ::catalogue::TransportCatalogue* temp = catalogue_;
  catalogue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::catalogue::TransportCatalogue* WholeMessage::unsafe_arena_release_catalogue() {
  // @@protoc_insertion_point(field_release:catalogue.WholeMessage.catalogue)
  
  ::catalogue::TransportCatalogue* temp = catalogue_;
  catalogue_ = nullptr;
  return temp;
}
inline ::catalogue::TransportCatalogue* WholeMessage::_internal_mutable_catalogue() {
  
  if (catalogue_ == nullptr) {
    auto* p = CreateMaybeMessage<::catalogue::TransportCatalogue>(GetArena());
    catalogue_ = p;
  }
  return catalogue_;
}
inline ::catalogue::TransportCatalogue* WholeMessage::mutable_catalogue() {
  // @@protoc_insertion_point(field_mutable:catalogue.WholeMessage.catalogue)
  return _internal_mutable_catalogue();
}
inline void WholeMessage::set_allocated_catalogue(::catalogue::TransportCatalogue* catalogue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete catalogue_;
  }
  if (catalogue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(catalogue);
    if (message_arena != submessage_arena) {
      catalogue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, catalogue, submessage_arena);
    }
    
  } else {
    
  }
  catalogue_ = catalogue;
  // @@protoc_insertion_point(field_set_allocated:catalogue.WholeMessage.catalogue)
}

// .rend.MapRenderer renderer = 2;
inline bool WholeMessage::_internal_has_renderer() const {
  return this != internal_default_instance() && renderer_ != nullptr;
}
inline bool WholeMessage::has_renderer() const {
  return _internal_has_renderer();
}
inline const ::rend::MapRenderer& WholeMessage::_internal_renderer() const {
  const ::rend::MapRenderer* p = renderer_;
  return p != nullptr ? *p : reinterpret_cast<const ::rend::MapRenderer&>(
      ::rend::_MapRenderer_default_instance_);
}
inline const ::rend::MapRenderer& WholeMessage::renderer() const {
  // @@protoc_insertion_point(field_get:catalogue.WholeMessage.renderer)
  return _internal_renderer();
}
inline void WholeMessage::unsafe_arena_set_allocated_renderer(
    ::rend::MapRenderer* renderer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderer_);
  }
  renderer_ = renderer;
  if (renderer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalogue.WholeMessage.renderer)
}
inline ::rend::MapRenderer* WholeMessage::release_renderer() {
  
  ::rend::MapRenderer* temp = renderer_;
  renderer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::rend::MapRenderer* WholeMessage::unsafe_arena_release_renderer() {
  // @@protoc_insertion_point(field_release:catalogue.WholeMessage.renderer)
  
  ::rend::MapRenderer* temp = renderer_;
  renderer_ = nullptr;
  return temp;
}
inline ::rend::MapRenderer* WholeMessage::_internal_mutable_renderer() {
  
  if (renderer_ == nullptr) {
    auto* p = CreateMaybeMessage<::rend::MapRenderer>(GetArena());
    renderer_ = p;
  }
  return renderer_;
}
inline ::rend::MapRenderer* WholeMessage::mutable_renderer() {
  // @@protoc_insertion_point(field_mutable:catalogue.WholeMessage.renderer)
  return _internal_mutable_renderer();
}
inline void WholeMessage::set_allocated_renderer(::rend::MapRenderer* renderer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderer_);
  }
  if (renderer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderer)->GetArena();
    if (message_arena != submessage_arena) {
      renderer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderer, submessage_arena);
    }
    
  } else {
    
  }
  renderer_ = renderer;
  // @@protoc_insertion_point(field_set_allocated:catalogue.WholeMessage.renderer)
}

// .router.RouterSettings router_settings = 3;
inline bool WholeMessage::_internal_has_router_settings() const {
  return this != internal_default_instance() && router_settings_ != nullptr;
}
inline bool WholeMessage::has_router_settings() const {
  return _internal_has_router_settings();
}
inline const ::router::RouterSettings& WholeMessage::_internal_router_settings() const {
  const ::router::RouterSettings* p = router_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::router::RouterSettings&>(
      ::router::_RouterSettings_default_instance_);
}
inline const ::router::RouterSettings& WholeMessage::router_settings() const {
  // @@protoc_insertion_point(field_get:catalogue.WholeMessage.router_settings)
  return _internal_router_settings();
}
inline void WholeMessage::unsafe_arena_set_allocated_router_settings(
    ::router::RouterSettings* router_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_settings_);
  }
  router_settings_ = router_settings;
  if (router_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalogue.WholeMessage.router_settings)
}
inline ::router::RouterSettings* WholeMessage::release_router_settings() {
  
  ::router::RouterSettings* temp = router_settings_;
  router_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::router::RouterSettings* WholeMessage::unsafe_arena_release_router_settings() {
  // @@protoc_insertion_point(field_release:catalogue.WholeMessage.router_settings)
  
  ::router::RouterSettings* temp = router_settings_;
  router_settings_ = nullptr;
  return temp;
}
inline ::router::RouterSettings* WholeMessage::_internal_mutable_router_settings() {
  
  if (router_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::router::RouterSettings>(GetArena());
    router_settings_ = p;
  }
  return router_settings_;
}
inline ::router::RouterSettings* WholeMessage::mutable_router_settings() {
  // @@protoc_insertion_point(field_mutable:catalogue.WholeMessage.router_settings)
  return _internal_mutable_router_settings();
}
inline void WholeMessage::set_allocated_router_settings(::router::RouterSettings* router_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_settings_);
  }
  if (router_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_settings)->GetArena();
    if (message_arena != submessage_arena) {
      router_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router_settings, submessage_arena);
    }
    
  } else {
    
  }
  router_settings_ = router_settings;
  // @@protoc_insertion_point(field_set_allocated:catalogue.WholeMessage.router_settings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace catalogue

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
