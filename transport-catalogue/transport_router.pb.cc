// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#include "transport_router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace router {
class RouterSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouterSettings> _instance;
} _RouterSettings_default_instance_;
}  // namespace router
static void InitDefaultsscc_info_RouterSettings_transport_5frouter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::router::_RouterSettings_default_instance_;
    new (ptr) ::router::RouterSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouterSettings_transport_5frouter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouterSettings_transport_5frouter_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5frouter_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_5frouter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5frouter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5frouter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router::RouterSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::router::RouterSettings, bus_speed_),
  PROTOBUF_FIELD_OFFSET(::router::RouterSettings, stop_waiting_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::router::RouterSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_RouterSettings_default_instance_),
};

const char descriptor_table_protodef_transport_5frouter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026transport_router.proto\022\006router\">\n\016Rout"
  "erSettings\022\021\n\tbus_speed\030\001 \001(\001\022\031\n\021stop_wa"
  "iting_time\030\002 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5frouter_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transport_5frouter_2eproto_sccs[1] = {
  &scc_info_RouterSettings_transport_5frouter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5frouter_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto = {
  false, false, descriptor_table_protodef_transport_5frouter_2eproto, "transport_router.proto", 104,
  &descriptor_table_transport_5frouter_2eproto_once, descriptor_table_transport_5frouter_2eproto_sccs, descriptor_table_transport_5frouter_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_transport_5frouter_2eproto::offsets,
  file_level_metadata_transport_5frouter_2eproto, 1, file_level_enum_descriptors_transport_5frouter_2eproto, file_level_service_descriptors_transport_5frouter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transport_5frouter_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transport_5frouter_2eproto)), true);
namespace router {

// ===================================================================

class RouterSettings::_Internal {
 public:
};

RouterSettings::RouterSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:router.RouterSettings)
}
RouterSettings::RouterSettings(const RouterSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bus_speed_, &from.bus_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_waiting_time_) -
    reinterpret_cast<char*>(&bus_speed_)) + sizeof(stop_waiting_time_));
  // @@protoc_insertion_point(copy_constructor:router.RouterSettings)
}

void RouterSettings::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bus_speed_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&stop_waiting_time_) -
      reinterpret_cast<char*>(&bus_speed_)) + sizeof(stop_waiting_time_));
}

RouterSettings::~RouterSettings() {
  // @@protoc_insertion_point(destructor:router.RouterSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouterSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouterSettings::ArenaDtor(void* object) {
  RouterSettings* _this = reinterpret_cast< RouterSettings* >(object);
  (void)_this;
}
void RouterSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouterSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouterSettings& RouterSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouterSettings_transport_5frouter_2eproto.base);
  return *internal_default_instance();
}


void RouterSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:router.RouterSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bus_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_waiting_time_) -
      reinterpret_cast<char*>(&bus_speed_)) + sizeof(stop_waiting_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouterSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double bus_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          bus_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 stop_waiting_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stop_waiting_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouterSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.RouterSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double bus_speed = 1;
  if (!(this->bus_speed() <= 0 && this->bus_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_bus_speed(), target);
  }

  // int32 stop_waiting_time = 2;
  if (this->stop_waiting_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stop_waiting_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.RouterSettings)
  return target;
}

size_t RouterSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.RouterSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double bus_speed = 1;
  if (!(this->bus_speed() <= 0 && this->bus_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 stop_waiting_time = 2;
  if (this->stop_waiting_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stop_waiting_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouterSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:router.RouterSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const RouterSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouterSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:router.RouterSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:router.RouterSettings)
    MergeFrom(*source);
  }
}

void RouterSettings::MergeFrom(const RouterSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.RouterSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.bus_speed() <= 0 && from.bus_speed() >= 0)) {
    _internal_set_bus_speed(from._internal_bus_speed());
  }
  if (from.stop_waiting_time() != 0) {
    _internal_set_stop_waiting_time(from._internal_stop_waiting_time());
  }
}

void RouterSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:router.RouterSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterSettings::CopyFrom(const RouterSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.RouterSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterSettings::IsInitialized() const {
  return true;
}

void RouterSettings::InternalSwap(RouterSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouterSettings, stop_waiting_time_)
      + sizeof(RouterSettings::stop_waiting_time_)
      - PROTOBUF_FIELD_OFFSET(RouterSettings, bus_speed_)>(
          reinterpret_cast<char*>(&bus_speed_),
          reinterpret_cast<char*>(&other->bus_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouterSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace router
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::router::RouterSettings* Arena::CreateMaybeMessage< ::router::RouterSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::RouterSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
